/* Generated By:JavaCC: Do not edit this line. ReadAbsyn.java */
package Semant;
import java.util.LinkedList;
public class ReadAbsyn implements ReadAbsynConstants {

/**************************************************
 * The MiniJava language grammar starts here      *
 **************************************************/

//Program(AbstractList<ClassDecl> classes)
  final public Semant.Absyn.Program Program() throws ParseException {
    LinkedList<Semant.Absyn.ClassDecl> cl = new LinkedList<Semant.Absyn.ClassDecl>();
    jj_consume_token(42);
    jj_consume_token(6);
    jj_consume_token(58);
    jj_consume_token(6);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
      case 47:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ClassDecl(cl);
        break;
      case 47:
        ThreadDecl(cl);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(7);
    jj_consume_token(7);
    jj_consume_token(0);
      {if (true) return new Semant.Absyn.Program(cl);}
    throw new Error("Missing return statement in function");
  }

//ClassDecl(String name, String parent, LinkedList<VarDecl> fields, LinkedList<MethodDecl> methods)
  final public void ClassDecl(LinkedList<Semant.Absyn.ClassDecl> cl) throws ParseException {
        Token name = null, parent = null;
        String parentName;
        LinkedList<Semant.Absyn.VarDecl> vl = new LinkedList<Semant.Absyn.VarDecl>();
        LinkedList<Semant.Absyn.MethodDecl> ml = new LinkedList<Semant.Absyn.MethodDecl>();
    jj_consume_token(19);
    jj_consume_token(6);
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      break;
    case ID:
      parent = jj_consume_token(ID);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(58);
    jj_consume_token(6);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      VarDecl(vl);
    }
    jj_consume_token(7);
    jj_consume_token(58);
    jj_consume_token(6);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      MethodDecl(ml);
    }
    jj_consume_token(7);
    jj_consume_token(7);
                if (null == parent) parentName = null;
                else parentName = parent.toString();
                cl.add(new Semant.Absyn.ClassDecl(name.toString(), parentName, vl, ml));
  }

//ThreadDecl(String name, LinkedList<VarDecl> fields, LinkedList<MethodDecl> methods)
  final public void ThreadDecl(LinkedList<Semant.Absyn.ClassDecl> cl) throws ParseException {
        Token name = null;
        LinkedList<Semant.Absyn.VarDecl> vl = new LinkedList<Semant.Absyn.VarDecl>();
        LinkedList<Semant.Absyn.MethodDecl> ml = new LinkedList<Semant.Absyn.MethodDecl>();
    jj_consume_token(47);
    jj_consume_token(6);
    name = jj_consume_token(ID);
    jj_consume_token(56);
    jj_consume_token(58);
    jj_consume_token(6);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      VarDecl(vl);
    }
    jj_consume_token(7);
    jj_consume_token(58);
    jj_consume_token(6);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
      case 51:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        MethodDecl(ml);
        break;
      case 51:
        VoidDecl(ml);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(7);
    jj_consume_token(7);
                cl.add(new Semant.Absyn.ThreadDecl(name.toString(), vl, ml));
  }

//MethodDecl(Type returnType, String name,
//		      LinkedList<Formal> params,
//		      LinkedList<VarDecl> locals,
//		      LinkedList<Stmt> stmts,
//		      Expr returnVal)
  final public void MethodDecl(LinkedList<Semant.Absyn.MethodDecl> ml) throws ParseException {
        Semant.Absyn.Type type = null;
        Token name;
        Semant.Absyn.Formal  param = null;
        Semant.Absyn.Stmt    stmt  = null;
        Semant.Absyn.Expr    expr  = null;
        boolean sync = false;
        LinkedList<Semant.Absyn.Formal> params   = new LinkedList<Semant.Absyn.Formal>();
        LinkedList<Semant.Absyn.VarDecl> locals  = new LinkedList<Semant.Absyn.VarDecl>();
        LinkedList<Semant.Absyn.Stmt> stmts      = new LinkedList<Semant.Absyn.Stmt>();
    jj_consume_token(33);
    jj_consume_token(6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      break;
    case 12:
    case 17:
    case 28:
    case 31:
      type = Type();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      jj_consume_token(57);
                            sync = true;
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    name = jj_consume_token(ID);
    jj_consume_token(58);
    jj_consume_token(6);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      param = Formal();
                                                     params.add(param);
    }
    jj_consume_token(7);
    jj_consume_token(58);
    jj_consume_token(6);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      VarDecl(locals);
    }
    jj_consume_token(7);
    jj_consume_token(58);
    jj_consume_token(6);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
      case 16:
      case 29:
      case 52:
      case 54:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      stmt = Stmt();
                                                   stmts.add(stmt);
    }
    jj_consume_token(7);
    expr = Expr();
    jj_consume_token(7);
                  ml.add(new Semant.Absyn.MethodDecl(type, sync, name.toString(),
                                            params, locals, stmts, expr));
  }

//VoidDecl(String name,
//		      LinkedList<VarDecl> locals,
//		      LinkedList<Stmt> stmts)
  final public void VoidDecl(LinkedList<Semant.Absyn.MethodDecl> ml) throws ParseException {
        Token name;
        Semant.Absyn.Stmt    stmt  = null;
        LinkedList<Semant.Absyn.VarDecl> locals  = new LinkedList<Semant.Absyn.VarDecl>();
        LinkedList<Semant.Absyn.Stmt> stmts      = new LinkedList<Semant.Absyn.Stmt>();
    jj_consume_token(51);
    jj_consume_token(6);
    name = jj_consume_token(ID);
    jj_consume_token(58);
    jj_consume_token(6);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_9;
      }
      VarDecl(locals);
    }
    jj_consume_token(7);
    jj_consume_token(58);
    jj_consume_token(6);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
      case 16:
      case 29:
      case 52:
      case 54:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_10;
      }
      stmt = Stmt();
                                                   stmts.add(stmt);
    }
    jj_consume_token(7);
    jj_consume_token(7);
          ml.add(new Semant.Absyn.VoidDecl(name.toString(), locals, stmts));
  }

//Formal(Type type, String name)
  final public Semant.Absyn.Formal Formal() throws ParseException {
        Semant.Absyn.Type type;
        Token name;
    jj_consume_token(25);
    jj_consume_token(6);
    type = Type();
    name = jj_consume_token(ID);
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.Formal(type, name.image);}
    throw new Error("Missing return statement in function");
  }

//VarDecl(Type type, String name, Expr init)
  final public void VarDecl(LinkedList<Semant.Absyn.VarDecl> vl) throws ParseException {
        Semant.Absyn.Type type;
        Token name;
        Semant.Absyn.Expr init = null;
    jj_consume_token(50);
    jj_consume_token(6);
    type = Type();
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      break;
    case 9:
    case 10:
    case 11:
    case 18:
    case 20:
    case 21:
    case 23:
    case 24:
    case 26:
    case 27:
    case 30:
    case 32:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 44:
    case 45:
    case 46:
    case 48:
    case 53:
      init = Expr();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(7);
        //TODO: new field with the return type (maybe?)
        //	Types returnType = findReturnType(type)
        vl.add(new Semant.Absyn.VarDecl(type, name.image, init));
  }

  final public Semant.Absyn.Type Type() throws ParseException {
 Semant.Absyn.Type t;
    if (jj_2_1(2147483647)) {
      t = ArrayType();
    } else if (jj_2_2(2147483647)) {
      t = BooleanType();
    } else if (jj_2_3(2147483647)) {
      t = IntegerType();
    } else if (jj_2_4(2147483647)) {
      t = IdentifierType();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// ArrayType(Type base)
  final public Semant.Absyn.Type ArrayType() throws ParseException {
  Semant.Absyn.Type t;
    jj_consume_token(12);
    jj_consume_token(6);
    t = Type();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.ArrayType(t);}
    throw new Error("Missing return statement in function");
  }

// BooleanType() { }
  final public Semant.Absyn.Type BooleanType() throws ParseException {
    jj_consume_token(17);
          {if (true) return new Semant.Absyn.BooleanType();}
    throw new Error("Missing return statement in function");
  }

// IntegerType() { }
  final public Semant.Absyn.Type IntegerType() throws ParseException {
    jj_consume_token(31);
          {if (true) return new Semant.Absyn.IntegerType();}
    throw new Error("Missing return statement in function");
  }

// IdentifierType(String id)
  final public Semant.Absyn.Type IdentifierType() throws ParseException {
  Token t;
    jj_consume_token(28);
    jj_consume_token(6);
    t = jj_consume_token(ID);
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.IdentifierType(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Semant.Absyn.Stmt Stmt() throws ParseException {
        Semant.Absyn.Stmt s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      s = AssignStmt();
      break;
    case 16:
      s = BlockStmt();
      break;
    case 29:
      s = IfStmt();
      break;
    case 54:
      s = XinuCallStmt();
      break;
    case 52:
      s = WhileStmt();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

//AssignStmt(AssignableExpr lhs, Expr rhs)
  final public Semant.Absyn.Stmt AssignStmt() throws ParseException {
        Semant.Absyn.Expr lhs = null, rhs = null;
    jj_consume_token(14);
    jj_consume_token(6);
    lhs = Expr();
    rhs = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.AssignStmt((Semant.Absyn.AssignableExpr) lhs, rhs);}
    throw new Error("Missing return statement in function");
  }

//BlockStmt(LinkedList<Stmt> stmts)
  final public Semant.Absyn.Stmt BlockStmt() throws ParseException {
        Semant.Absyn.Stmt stmt = null;
        LinkedList<Semant.Absyn.Stmt> stmts      = new LinkedList<Semant.Absyn.Stmt>();
    jj_consume_token(16);
    jj_consume_token(6);
    jj_consume_token(58);
    jj_consume_token(6);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
      case 16:
      case 29:
      case 52:
      case 54:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_11;
      }
      stmt = Stmt();
                                          stmts.add(stmt);
    }
    jj_consume_token(7);
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.BlockStmt(stmts);}
    throw new Error("Missing return statement in function");
  }

//IfStmt(Expr test, Stmt thenStm, Stmt elseStm)
  final public Semant.Absyn.Stmt IfStmt() throws ParseException {
        Semant.Absyn.Expr test;
        Semant.Absyn.Stmt thenStm, elseStm = null;
    jj_consume_token(29);
    jj_consume_token(6);
    test = Expr();
    thenStm = Stmt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
                  elseStm = null;
      break;
    case 14:
    case 16:
    case 29:
    case 52:
    case 54:
      elseStm = Stmt();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.IfStmt(test, thenStm, elseStm);}
    throw new Error("Missing return statement in function");
  }

//XinuCallStmt(list of Expr)
  final public Semant.Absyn.Stmt XinuCallStmt() throws ParseException {
        Token name;
        Semant.Absyn.Expr arg;
        LinkedList<Semant.Absyn.Expr> args      = new LinkedList<Semant.Absyn.Expr>();
    jj_consume_token(54);
    jj_consume_token(6);
    name = jj_consume_token(ID);
    jj_consume_token(58);
    jj_consume_token(6);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case 10:
      case 11:
      case 18:
      case 20:
      case 21:
      case 23:
      case 24:
      case 26:
      case 27:
      case 30:
      case 32:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 44:
      case 45:
      case 46:
      case 48:
      case 53:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_12;
      }
      arg = Expr();
                                       args.add(arg);
    }
    jj_consume_token(7);
    jj_consume_token(7);
                  {if (true) return new Semant.Absyn.XinuCallStmt(name.image, args);}
    throw new Error("Missing return statement in function");
  }

//WhileStmt(Expr test, Stmt body)
  final public Semant.Absyn.Stmt WhileStmt() throws ParseException {
        Semant.Absyn.Expr test;
        Semant.Absyn.Stmt body;
    jj_consume_token(52);
    jj_consume_token(6);
    test = Expr();
    body = Stmt();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.WhileStmt(test, body);}
    throw new Error("Missing return statement in function");
  }

  final public Semant.Absyn.Expr Expr() throws ParseException {
        Semant.Absyn.Expr e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
      e = AddExpr();
      break;
    case 10:
      e = AndExpr();
      break;
    case 11:
      e = ArrayExpr();
      break;
    case 18:
      e = CallExpr();
      break;
    case 20:
      e = DivExpr();
      break;
    case 21:
      e = EqualExpr();
      break;
    case 23:
      e = FalseExpr();
      break;
    case 24:
      e = FieldExpr();
      break;
    case 26:
      e = GreaterExpr();
      break;
    case 27:
      e = IdentifierExpr();
      break;
    case 32:
      e = LesserExpr();
      break;
    case 34:
      e = MulExpr();
      break;
    case 35:
      e = NegExpr();
      break;
    case 36:
      e = NewArrayExpr();
      break;
    case 37:
      e = NewObjectExpr();
      break;
    case 38:
      e = NotEqExpr();
      break;
    case 39:
      e = NotExpr();
      break;
    case 40:
      e = NullExpr();
      break;
    case 41:
      e = OrExpr();
      break;
    case 45:
      e = SubExpr();
      break;
    case 46:
      e = ThisExpr();
      break;
    case 48:
      e = TrueExpr();
      break;
    case 53:
      e = XinuCallExpr();
      break;
    case 30:
      e = IntegerLiteral();
      break;
    case 44:
      e = StringLiteral();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

//AddExpr(Expr e1, Expr e2)
  final public Semant.Absyn.AddExpr AddExpr() throws ParseException {
        Semant.Absyn.Expr e1, e2;
    jj_consume_token(9);
    jj_consume_token(6);
    e1 = Expr();
    e2 = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.AddExpr(e1, e2);}
    throw new Error("Missing return statement in function");
  }

//AndExpr(Expr e1, Expr e2)
  final public Semant.Absyn.AndExpr AndExpr() throws ParseException {
        Semant.Absyn.Expr e1, e2;
    jj_consume_token(10);
    jj_consume_token(6);
    e1 = Expr();
    e2 = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.AndExpr(e1, e2);}
    throw new Error("Missing return statement in function");
  }

//DivExpr(Expr e1, Expr e2)
  final public Semant.Absyn.DivExpr DivExpr() throws ParseException {
        Semant.Absyn.Expr e1, e2;
    jj_consume_token(20);
    jj_consume_token(6);
    e1 = Expr();
    e2 = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.DivExpr(e1, e2);}
    throw new Error("Missing return statement in function");
  }

//EqualExpr(Expr e1, Expr e2)
  final public Semant.Absyn.EqualExpr EqualExpr() throws ParseException {
        Semant.Absyn.Expr e1, e2;
    jj_consume_token(21);
    jj_consume_token(6);
    e1 = Expr();
    e2 = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.EqualExpr(e1, e2);}
    throw new Error("Missing return statement in function");
  }

//GreaterExpr(Expr e1, Expr e2)
  final public Semant.Absyn.GreaterExpr GreaterExpr() throws ParseException {
        Semant.Absyn.Expr e1, e2;
    jj_consume_token(26);
    jj_consume_token(6);
    e1 = Expr();
    e2 = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.GreaterExpr(e1, e2);}
    throw new Error("Missing return statement in function");
  }

//LesserExpr(Expr e1, Expr e2)
  final public Semant.Absyn.LesserExpr LesserExpr() throws ParseException {
        Semant.Absyn.Expr e1, e2;
    jj_consume_token(32);
    jj_consume_token(6);
    e1 = Expr();
    e2 = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.LesserExpr(e1, e2);}
    throw new Error("Missing return statement in function");
  }

//MulExpr(Expr e1, Expr e2)
  final public Semant.Absyn.MulExpr MulExpr() throws ParseException {
        Semant.Absyn.Expr e1, e2;
    jj_consume_token(34);
    jj_consume_token(6);
    e1 = Expr();
    e2 = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.MulExpr(e1, e2);}
    throw new Error("Missing return statement in function");
  }

//NotEqExpr(Expr e1, Expr e2)
  final public Semant.Absyn.NotEqExpr NotEqExpr() throws ParseException {
        Semant.Absyn.Expr e1, e2;
    jj_consume_token(38);
    jj_consume_token(6);
    e1 = Expr();
    e2 = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.NotEqExpr(e1, e2);}
    throw new Error("Missing return statement in function");
  }

//OrExpr(Expr e1, Expr e2)
  final public Semant.Absyn.OrExpr OrExpr() throws ParseException {
        Semant.Absyn.Expr e1, e2;
    jj_consume_token(41);
    jj_consume_token(6);
    e1 = Expr();
    e2 = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.OrExpr(e1, e2);}
    throw new Error("Missing return statement in function");
  }

//SubExpr(Expr e1, Expr e2)
  final public Semant.Absyn.SubExpr SubExpr() throws ParseException {
        Semant.Absyn.Expr e1, e2;
    jj_consume_token(45);
    jj_consume_token(6);
    e1 = Expr();
    e2 = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.SubExpr(e1, e2);}
    throw new Error("Missing return statement in function");
  }

//ArrayExpr(Expr target, Expr index)
  final public Semant.Absyn.ArrayExpr ArrayExpr() throws ParseException {
        Semant.Absyn.Expr target, index;
    jj_consume_token(11);
    jj_consume_token(6);
    target = Expr();
    index = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.ArrayExpr(target, index);}
    throw new Error("Missing return statement in function");
  }

//CallExpr(Expr target, String method, LinkedList<Expr> args)
  final public Semant.Absyn.CallExpr CallExpr() throws ParseException {
        Semant.Absyn.Expr target;
        Token method;
        Semant.Absyn.Expr arg;
        LinkedList<Semant.Absyn.Expr> args = new LinkedList<Semant.Absyn.Expr>();
    jj_consume_token(18);
    jj_consume_token(6);
    target = Expr();
    method = jj_consume_token(ID);
    jj_consume_token(58);
    jj_consume_token(6);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case 10:
      case 11:
      case 18:
      case 20:
      case 21:
      case 23:
      case 24:
      case 26:
      case 27:
      case 30:
      case 32:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 44:
      case 45:
      case 46:
      case 48:
      case 53:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_13;
      }
      arg = Expr();
                                       args.add(arg);
    }
    jj_consume_token(7);
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.CallExpr(target, method.image, args);}
    throw new Error("Missing return statement in function");
  }

//FalseExpr()
  final public Semant.Absyn.FalseExpr FalseExpr() throws ParseException {
    jj_consume_token(23);
          {if (true) return new Semant.Absyn.FalseExpr();}
    throw new Error("Missing return statement in function");
  }

//FieldExpr(Expr target, String field)
  final public Semant.Absyn.FieldExpr FieldExpr() throws ParseException {
        Semant.Absyn.Expr target;
        Token field;
    jj_consume_token(24);
    jj_consume_token(6);
    target = Expr();
    field = jj_consume_token(ID);
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.FieldExpr(target, field.image);}
    throw new Error("Missing return statement in function");
  }

//IdentifierExpr(String id)
  final public Semant.Absyn.IdentifierExpr IdentifierExpr() throws ParseException {
        Token id;
    jj_consume_token(27);
    jj_consume_token(6);
    id = jj_consume_token(ID);
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.IdentifierExpr(id.image);}
    throw new Error("Missing return statement in function");
  }

//NegExpr(Expr e1)
  final public Semant.Absyn.NegExpr NegExpr() throws ParseException {
        Semant.Absyn.Expr e1;
    jj_consume_token(35);
    jj_consume_token(6);
    e1 = Expr();
    jj_consume_token(7);
         {if (true) return new Semant.Absyn.NegExpr(e1);}
    throw new Error("Missing return statement in function");
  }

//NewArrayExpr(Type type, LinkedList<Expr> dimensions)
  final public Semant.Absyn.NewArrayExpr NewArrayExpr() throws ParseException {
        Semant.Absyn.Type type;
        Semant.Absyn.Expr expr;
        LinkedList<Semant.Absyn.Expr> dimensions = new LinkedList<Semant.Absyn.Expr>();
    jj_consume_token(36);
    jj_consume_token(6);
    type = Type();
    jj_consume_token(58);
    jj_consume_token(6);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case 10:
      case 11:
      case 18:
      case 20:
      case 21:
      case 23:
      case 24:
      case 26:
      case 27:
      case 30:
      case 32:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 44:
      case 45:
      case 46:
      case 48:
      case 53:
      case 59:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case 10:
      case 11:
      case 18:
      case 20:
      case 21:
      case 23:
      case 24:
      case 26:
      case 27:
      case 30:
      case 32:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 44:
      case 45:
      case 46:
      case 48:
      case 53:
        expr = Expr();
                                         dimensions.add(expr);
        break;
      case 59:
        jj_consume_token(59);
                                  dimensions.add(null);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(7);
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.NewArrayExpr(type, dimensions);}
    throw new Error("Missing return statement in function");
  }

//NewObjectExpr(Type type)
  final public Semant.Absyn.NewObjectExpr NewObjectExpr() throws ParseException {
        Semant.Absyn.Type type;
    jj_consume_token(37);
    jj_consume_token(6);
    type = Type();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.NewObjectExpr(type);}
    throw new Error("Missing return statement in function");
  }

//NotExpr(Expr e1)
  final public Semant.Absyn.NotExpr NotExpr() throws ParseException {
        Semant.Absyn.Expr e1;
    jj_consume_token(39);
    jj_consume_token(6);
    e1 = Expr();
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.NotExpr(e1);}
    throw new Error("Missing return statement in function");
  }

//NullExpr()
  final public Semant.Absyn.NullExpr NullExpr() throws ParseException {
    jj_consume_token(40);
          {if (true) return new Semant.Absyn.NullExpr();}
    throw new Error("Missing return statement in function");
  }

//XinuCallExpr(list of Expr)
  final public Semant.Absyn.XinuCallExpr XinuCallExpr() throws ParseException {
        Token name;
        Semant.Absyn.Expr arg;
        LinkedList<Semant.Absyn.Expr> args      = new LinkedList<Semant.Absyn.Expr>();
    jj_consume_token(53);
    jj_consume_token(6);
    name = jj_consume_token(ID);
    jj_consume_token(58);
    jj_consume_token(6);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case 10:
      case 11:
      case 18:
      case 20:
      case 21:
      case 23:
      case 24:
      case 26:
      case 27:
      case 30:
      case 32:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 44:
      case 45:
      case 46:
      case 48:
      case 53:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_15;
      }
      arg = Expr();
                                       args.add(arg);
    }
    jj_consume_token(7);
    jj_consume_token(7);
                  {if (true) return new Semant.Absyn.XinuCallExpr(name.image, args);}
    throw new Error("Missing return statement in function");
  }

//ThisExpr()
  final public Semant.Absyn.ThisExpr ThisExpr() throws ParseException {
    jj_consume_token(46);
          {if (true) return new Semant.Absyn.ThisExpr();}
    throw new Error("Missing return statement in function");
  }

//TrueExpr()
  final public Semant.Absyn.TrueExpr TrueExpr() throws ParseException {
    jj_consume_token(48);
          {if (true) return new Semant.Absyn.TrueExpr();}
    throw new Error("Missing return statement in function");
  }

//IntegerLiteral(int value)
  final public Semant.Absyn.IntegerLiteral IntegerLiteral() throws ParseException {
  Token t;
    jj_consume_token(30);
    jj_consume_token(6);
    t = jj_consume_token(INT);
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.IntegerLiteral(new Integer(t.toString()));}
    throw new Error("Missing return statement in function");
  }

//StringLiteral(String value)
  final public Semant.Absyn.StringLiteral StringLiteral() throws ParseException {
  Token t;
    jj_consume_token(44);
    jj_consume_token(6);
    t = jj_consume_token(STRING);
    jj_consume_token(7);
          {if (true) return new Semant.Absyn.StringLiteral(t.toString());}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_22() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(28)) return true;
    if (jj_scan_token(6)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(7)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(12)) return true;
    if (jj_scan_token(6)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(7)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_18()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ReadAbsynTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x90021000,0x0,0x2000000,0x0,0x20014000,0x0,0x20014000,0x4db40e00,0x20014000,0x20014000,0x20014000,0x4db40e00,0x4db40e00,0x4db40e00,0x4db40e00,0x4db40e00,0x4db40e00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000,0x8000,0x8000000,0x40000,0x2,0x40000,0x80002,0x80002,0x800000,0x2000000,0x0,0x40000,0x500000,0x40000,0x500000,0x82173fd,0x500000,0x500000,0x8500000,0x2173fd,0x2173fd,0x2173fd,0x82173fd,0x82173fd,0x2173fd,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ReadAbsyn(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ReadAbsyn(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ReadAbsynTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ReadAbsyn(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ReadAbsynTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ReadAbsyn(ReadAbsynTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ReadAbsynTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[75];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 75; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
